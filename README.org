#+TITLE: README revisions file
#+SUBTITLE: NXP Runtime
#+AUTHOR: jmc

* DONE Tree representation. Global control list. Prompts.
Installed a new globale in the environment compiled from knowledge bases to properly handle question with Emacs Lisp ~completing-read~.

Installed a new globale in the d-register of the SECD machine to keep track of the top level control list, which is modified by the CPS-controls.

Introduced a tree representation for hypotheses (interactively displaying the backward chaining). It is hooked to the ~t~ command in the Encyclopedia buffer.

* DONE Reviving satfault.kb! <2021-01-03 dim.>
Utilities to convert from the XML knowledge base format used in the LLVM C++ implementation to the sexps of the simple LISP variant. (Also converts to an Emacs ~tree-widget~ showing the XML structure.)

Introduced the /not/ operator in simple LISP variant for knowledge bases.

Introduced ~*T*~ and ~*F*~ "constant" promises in rule compilation, in order to handle conditions like ~(eq <VAR> *T*)~ where logical constants appear as promises to the compiler.

* DONE Forward chaining. RHS. Initial text client (Encyclopedia) <2020-12-29 mar.>
** Forward chaining
Forward chaining is implemented as an Emacs hook into the group of environment related functions ~(defvar secd-env-update-hook nil)~. It is installed in the utility /Knowcess/ function provided by the knowledge base compiler:

#+BEGIN_SRC: emacs-lisp
(defun secd-comp--kb-knowcess (e goals &optional s)
  (let ((clist (cons 'STOP nil)))
    (dolist (goal goals clist)
      (setq clist (cons 'LDP (cons goal (cons 'AP0 clist))))
      )
    (add-hook 'secd-env-update-hook 'secd-comp--kb-forward-hook)
    (secd-cycle s e clist nil)
    )
  )
#+END_SRC

It basically posts all rules which LHSes mention the updated sign, or the hypo of the rule when its evaluation is known (according to an inference option flag for /gating/ ~(defvar secd--kb-option-forward-chaining-gate t)~.

** Right-hand sides
RHS are the /then do/ part of rules and consist of a sequence of functional expressions in the simple LISP variant. A new operator is introduced to operate on the environment, i.e. on signs, ~set: var val~ which directly assigns to promise ~var~ the value ~val~ ignoring its control list. (Triggering forward-chaining as the environment is updated.)

The implementation of a RHS execution follows the CPS already used in LHSes. A new control is introduced, ~SEQ~ which like ~ANY~ and ~ALL~ works in conjunction with ~CPS~, by sequentially pushing the control sublists for RHS actions onto the global control list.

** Experimental text-based client
An implementation of the /Encyclopedia/ is suggested using Emacs /ewoc/ structures and simple commands to /Knowcess/, /Answer/ and /Reset/ at this (early) stage.

A standard MVC pattern is installed to link environment, encyclopedia and commands using Emacs hooks again (into the environment related group of functions).

#+CAPTION: An example session running on Emacs. Top left: the knowledge base, top right: the session trace and bottom: the Encyclopedia.
#+NAME:   fig:Session
[[./NXP-Session.png]]

* DONE Factored out environment management. Forward infra.
The access and update environment functions are isolated in their own group, and hooks are installed for update events. Hook functions support the tentative signature ~(lambda (var-name value &optional state)~.

This is to be used in conjunction with additional kb-globals compiled to the environment by the kb-compiler:
#+BEGIN_SRC emacs-lisp
(defconst secd--kb-forward-chaining-signs  '*FWRD-SIGNS*)
(defconst secd--kb-forward-chaining-rules  '*FWRD-RULES*)
#+END_SRC

Both are alists from signs to list of rules, and from rules to hypos respectively. They represent forward-chaining links at runtime.

* DONE Knowledge base compiler <2020-12-12 sam.>
Fixed the strict compiler so that AP0/UPD allow promises to be fetched either from the environment with LDP or from the control list with LDE.

Initial knowledge base compiler, based on a lazy variant of the fixed strict compiler. The variant compiles all variables in conditions to promises LDP <var> AP0 rather than LD <var>. Note that the variant is strict: it evaluates the promise immediately.

Syntax for knowledge bases:

((rule <hypo> ((cond-sexp) ... (cond-sexp)))
 (rule <hypo> ((cond-sexp) ... (cond-sexp)))
 ...
 (rule <hypo> ((cond-sexp) ... (cond-sexp)))
)

* DONE Strict compiler <2020-12-05 sam.>
First implementation, following Henderson's book (p. 340), of a compiler for the simple variant of Lispkit, without the NXP extensions.

The variant has QUOTE, ATOM, CAR, CDR, CONS, EQ, LEQ, ADD/SUB/MUL/DIV/REM, IF, LAMBDA, LET and Application. Values are quoted, any other atom is a variable.

* DONE NXP Goal/Subgoal hierachy <2020-11-30 lun.>
Implemented the specific control used in NXP goal/subgoal hierachies
under specific mnemonics ANY, ALL which operates like sequences of
applications on boolean promises (see LDP/UPD LDE/UPD).

Continuation Passing Style is used for this implementation by
modifying the top of the control-list and the stack, according to the
NXP goal/subgoal specific handling (pre-fetching and OR/AND hierarchy).
  - CPS family (ANY, ALL, NOT, /CPS/)

The CPS implementation supersedes a restricted interpretation of ANY,
ALL operators to their prefetching phase (still available in the
LAZY family of operators).
  
* DONE Henderson's delay/force from Lispkit <2020-11-26 jeu.>
Implemented in ~secd-lazy-group.el~ which defines controls:
  - LDE Immediate load of a promise
  - LDP Loads a named promise from environment
  - AP0 Switch to execution of promise on stack
  - UPD Terminates promise and store value, if required

Implemented special "optimized" logical operators for NXP. They operate
on Boolean promises (returning ~*T*~ or ~*F*~).
  - ANY n Returns ~*T*~ if one of the n b-promises on stack executes to ~*T*~
  - ALL n Returns ~*T*~ if all of the n b-promises on stack executes to ~*T*~
  - NOT   Inverts the top of stack b-promise

ANY and ALL are first preprocessed, looking for already executed
b-promises with values ~*T*~ or ~*F*~ respectively to conclude early
without further evaluation. If this is not the case b-promises are
executed in stack order until the first that returns ~*T*~ or ~*F*~
respectively. When none meet the test, the negative result is
returned. This is a kind of lenient evaluation in the NXP context.

* DONE Core functional runtime <2020-11-11 mer.>
Implemented the core SECD machine from Henderson's book. Controls are
grouped into:
  - LD family (LDC, LD, LDF)
  - OPS family (CAR, CDR, ATOM, CONS, SEL/JOIN, EQ LEQ)
  - FUN family (AP/RTN, DUM/RAP)
  - Arithmetic family (ADD, SUB, MUL, DIV, REM)
  - I/O family (ASK)

The SECD machine (runtime) is in ~secd-exec.el~. Operates on
underlying emacs-lisp atoms but operations on integer-typed atoms only
are from the arithmetic group.

